%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2372 654
%%HiResBoundingBox: 0 0 2371.9199 654
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2371.9199 654 re
W
q
[0.24 0 0 -0.24 0 654] cm
q
0 0 9883.333 2722.4487 re
W*
q
[24.527863 0 0 24.517275 304.87811 312.62299] cm
/DeviceRGB {} CS
[0.8431 0.1373 0.1373] SC
/DeviceRGB {} cs
[0.8431 0.1373 0.1373] sc
89.82251 49.13324 m
76.537476 49.13324 l
76.401489 49.13324 76.270508 49.151245 76.143494 49.180237 c
72.647522 49.668213 71.296509 56.516235 70.778503 61.980225 c
49.165527 61.980225 l
48.646484 56.516235 47.296509 49.668213 43.800476 49.180237 c
43.673523 49.151245 43.54248 49.13324 43.406494 49.13324 c
30.122498 49.13324 l
24.212524 49.13324 24.04248 66.560181 24.04248 68.548218 c
24.04248 70.534241 24.212524 87.962219 30.122498 87.962219 c
43.406494 87.962219 l
43.54248 87.962219 43.673523 87.9422 43.800476 87.913208 c
47.296509 87.427185 48.647522 80.577209 49.165527 75.11322 c
70.778503 75.11322 l
71.297485 80.577209 72.647522 87.426208 76.143494 87.913208 c
76.270508 87.9422 76.401489 87.962219 76.537476 87.962219 c
89.82251 87.962219 l
95.732483 87.962219 95.902527 70.534241 95.902527 68.548218 c
95.902527 66.561218 95.732483 49.13324 89.82251 49.13324 c
h
39.59552 84.403198 m
31.331482 84.403198 l
30.358521 83.507202 28.600525 78.049194 28.600525 68.548218 c
28.600525 59.046204 30.359497 53.587219 31.331482 52.693237 c
39.59552 52.693237 l
37.413513 57.900208 37.3255 67.134216 37.3255 68.548218 c
37.3255 69.964233 37.413513 79.197205 39.59552 84.403198 c
h
77.133484 70.55719 m
42.811523 70.55719 l
42.649475 70.257202 42.347473 70.444214 42.347473 68.548218 c
42.347473 66.652222 42.649475 66.839233 42.811523 66.538208 c
77.133484 66.538208 l
77.295532 66.839233 77.597473 66.651184 77.597473 68.548218 c
77.597534 70.444214 77.295532 70.257202 77.133484 70.55719 c
h
88.613525 84.403198 m
80.349487 84.403198 l
82.531494 79.197205 82.620483 69.964233 82.620483 68.548218 c
82.620483 67.134216 82.531494 57.900208 80.349487 52.693237 c
88.613525 52.693237 l
89.586487 53.587219 91.344482 59.046204 91.344482 68.548218 c
91.344482 78.050232 89.58551 83.507202 88.613525 84.403198 c
h
16.032593 73.225952 m
12.136658 69.329956 9.991028 64.150024 9.991028 58.640198 c
9.991028 50.01825 15.557129 44.343018 17.05188 43.108215 c
20.904358 39.925537 25.574707 38.012939 30.618347 38.012939 c
35.644348 38.012939 40.330811 39.875488 44.145264 43.074097 c
45.788696 44.452148 51.245605 49.03595 51.245605 58.640198 c
51.245605 59.001465 51.211548 59.35675 51.193298 59.714905 c
56.45813 59.714905 l
56.472656 59.357666 56.484314 58.999878 56.484314 58.640198 c
56.484314 53.427002 54.950928 48.450317 52.100098 44.222046 c
55.056946 39.923889 57.13916 34.834167 57.13916 28.996155 c
57.13916 17.344666 43.344177 12.037781 30.527527 12.037781 c
17.797913 12.037781 4.097473 17.344666 4.097473 28.996155 c
4.097473 34.871033 6.165344 39.970154 9.106445 44.265015 c
6.274475 48.483765 4.75238 53.444946 4.75238 58.640198 c
4.75238 65.55011 7.442871 72.045593 12.328613 76.93042 c
14.009705 78.611572 17.974609 79.738037 22.718628 80.316956 c
21.919128 74.905151 l
18.434814 74.390747 16.494507 73.65271 16.032593 73.225952 c
h
30.527527 19.022705 m
40.041809 19.022705 50.154297 22.518127 50.154297 28.996155 c
50.154297 32.602966 49.008972 35.901245 47.256348 38.840515 c
42.603088 34.916626 36.776978 32.774231 30.618347 32.774231 c
24.44751 32.774231 18.610413 34.925598 13.952393 38.864929 c
12.216065 35.928162 11.082398 32.624573 11.082398 28.996155 c
11.082398 24.0401 17.761597 19.022705 30.527527 19.022705 c
h
f
Q
q
[81.347275 0 0 81.312164 2961.1062 567.33691] cm
/DeviceRGB {} CS
[0.0667 0.0667 0.0667] SC
/DeviceRGB {} cs
[0.0667 0.0667 0.0667] sc
5.88 5.48 m
7.72 5.48 9.08 6.02006 9.96 7.1001 c
8.4 8.5201 l
8.16 8.14676 7.82 7.84676 7.38 7.620099 c
6.94 7.393439 6.43334 7.280099 5.86 7.280099 c
5.03334 7.280099 4.37 7.483439 3.87 7.8901 c
3.369999 8.29676 3.12 8.8201 3.12 9.460099 c
3.12 10.526799 3.82666 11.273399 5.24 11.700099 c
7.02 12.280099 l
8.02 12.600099 8.783299 13.046759 9.31 13.620099 c
9.8367 14.19344 10.099999 14.980099 10.099999 15.980099 c
10.099999 17.286798 9.63666 18.343498 8.709999 19.150099 c
7.783339 19.956699 6.606599 20.3601 5.179999 20.3601 c
3.139999 20.3601 1.633399 19.70676 0.659999 18.400101 c
2.239999 17.0401 l
2.546659 17.5201 2.966659 17.89344 3.499999 18.160101 c
4.03334 18.426762 4.613299 18.560101 5.239999 18.560101 c
6.026659 18.560101 6.693299 18.333441 7.239999 17.8801 c
7.786699 17.42676 8.06 16.8668 8.06 16.2001 c
8.06 15.70676 7.89334 15.29342 7.56 14.9601 c
7.226659 14.626781 6.626659 14.32676 5.759999 14.060101 c
4.499999 13.640101 l
3.233299 13.213441 2.346599 12.6701 1.839999 12.0101 c
1.333399 11.350101 1.079999 10.5001 1.079999 9.4601 c
1.079999 8.3534 1.526659 7.4135 2.419999 6.6401 c
3.313339 5.866701 4.4666 5.480101 5.879999 5.480101 c
5.88 5.48 l
h
18.02 5.84 m
19.393301 5.84 20.476601 6.18 21.27 6.86 c
22.0634 7.54 22.460001 8.520001 22.460001 9.8 c
22.460001 11.04 22.066662 12.01 21.280001 12.71 c
20.49334 13.41 19.4067 13.76 18.02 13.76 c
14.860001 13.76 l
14.860001 20 l
12.940001 20 l
12.940001 5.84 l
18.02 5.84 l
h
17.459999 12.08 m
18.459999 12.08 19.203299 11.89664 19.689999 11.52998 c
20.176699 11.16332 20.419998 10.586659 20.419998 9.79998 c
20.419998 8.27998 19.433338 7.51998 17.459999 7.51998 c
14.859999 7.51998 l
14.859999 12.079981 l
17.459999 12.079981 l
17.459999 12.08 l
h
26.719999 5.84 m
26.719999 20 l
24.799999 20 l
24.799999 5.84 l
26.719999 5.84 l
h
35.439999 5.84 m
36.826698 5.84 37.913399 6.18666 38.699997 6.88 c
39.486595 7.57334 39.879997 8.546701 39.879997 9.8 c
39.879997 10.74666 39.556656 11.5733 38.909996 12.280001 c
38.263336 12.986701 37.433296 13.406701 36.419994 13.540001 c
36.399994 13.540001 l
40.419994 20 l
38.019993 20 l
34.419994 13.76 l
32.279995 13.76 l
32.279995 20 l
30.359995 20 l
30.359995 5.84 l
35.439995 5.84 l
35.439999 5.84 l
h
34.880001 12.08 m
35.880001 12.08 36.623302 11.89664 37.110001 11.52998 c
37.596699 11.16332 37.84 10.586659 37.84 9.79998 c
37.84 8.27998 36.85334 7.51998 34.880001 7.51998 c
32.280003 7.51998 l
32.280003 12.079981 l
34.880001 12.079981 l
34.880001 12.08 l
h
44.5 5.84 m
44.5 20 l
42.580002 20 l
42.580002 5.84 l
44.5 5.84 l
h
57.580002 5.84 m
57.580002 7.64 l
53.02 7.64 l
53.02 20 l
51.099998 20 l
51.099998 7.64 l
46.539997 7.64 l
46.539997 5.84 l
57.579998 5.84 l
57.580002 5.84 l
h
61.279999 5.84 m
61.279999 14.58 l
61.279999 15.74 61.60334 16.693399 62.25 17.440001 c
62.89666 18.186602 63.759998 18.560001 64.839996 18.560001 c
65.919998 18.560001 66.783295 18.186661 67.429993 17.440001 c
68.076691 16.69334 68.399994 15.740001 68.399994 14.58 c
68.399994 5.84 l
70.319992 5.84 l
70.319992 14.900001 l
70.319992 15.873341 70.089989 16.7833 69.62999 17.630001 c
69.169991 18.476702 68.516693 19.143301 67.669991 19.630001 c
66.823288 20.116701 65.87999 20.360001 64.839989 20.360001 c
63.23999 20.360001 61.92659 19.83666 60.89999 18.790001 c
59.87339 17.743341 59.359989 16.446602 59.359989 14.900002 c
59.359989 5.840001 l
61.279991 5.840001 l
61.279999 5.84 l
h
77.760002 5.48 m
79.599998 5.48 80.959999 6.02006 81.840004 7.1001 c
80.280006 8.5201 l
80.040009 8.14676 79.700005 7.84676 79.26001 7.620099 c
78.820015 7.393439 78.313347 7.280099 77.740013 7.280099 c
76.913353 7.280099 76.250015 7.483439 75.750015 7.8901 c
75.250015 8.29676 75.000015 8.8201 75.000015 9.460099 c
75.000015 10.526799 75.706673 11.273399 77.120018 11.700099 c
78.900017 12.280099 l
79.900017 12.600099 80.663315 13.046759 81.190018 13.620099 c
81.716721 14.19344 81.980019 14.980099 81.980019 15.980099 c
81.980019 17.286798 81.516678 18.343498 80.590019 19.150099 c
79.663361 19.956699 78.486618 20.3601 77.06002 20.3601 c
75.02002 20.3601 73.51342 19.70676 72.540024 18.400101 c
74.120026 17.0401 l
74.426689 17.5201 74.846687 17.89344 75.380028 18.160101 c
75.913368 18.426762 76.493324 18.560101 77.120026 18.560101 c
77.906685 18.560101 78.573326 18.333441 79.120026 17.8801 c
79.666725 17.42676 79.940025 16.8668 79.940025 16.2001 c
79.940025 15.70676 79.773369 15.29342 79.440025 14.9601 c
79.106682 14.626781 78.506683 14.32676 77.640022 14.060101 c
76.38002 13.640101 l
75.113319 13.213441 74.226624 12.6701 73.720016 12.0101 c
73.213409 11.350101 72.960014 10.5001 72.960014 9.4601 c
72.960014 8.3534 73.406677 7.4135 74.300011 6.6401 c
75.193344 5.866701 76.346611 5.480101 77.76001 5.480101 c
77.760002 5.48 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
